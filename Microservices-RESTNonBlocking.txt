				Microservices
.....................................................................................
What are microservices?


Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably - a necessity for competing and winning in today’s world.

Let’s look at why its important to deliver software rapidly, frequently, reliably and sustainably.


Before MicroServices: 
 Monolothic ; single development,deployment.....

Microservices are collection of many design patterns.

....................................................................................
			 Micro services implementation
.....................................................................................
Microservices just archtecture, we can implement any language,any framework.

Java implementation:
1.Spring cloud
2.Quarkus
3.Vertx
etc....
.....................................................................................
.....................................................................................
			Quarkus as Microservice implmentation
.....................................................................................
Quarkus is framework which implements the most of the microservice design patterns
via Microprofile specification.

Micro Profile specification is  extension of "Microservice" design patterns.

Domain Modeling
................

ProductCatelog Management
Inventory Management
OrderManagement
DeliveryManagement

Application Architecture

ProductCataglog
  ->Service

What is service?

Service is nothing offering. Service means which offers something.
Service offers some biz functionality in applications
Service represents a domain like order - Order service,PaymentService


How to implement service?

=>Service is program
=>Service is single or multiple objects
=>Service Object which has apis
=>Service API's Expose some biz functionality
=>Service API may receive and return data to the callers
=>Caller could any other program which means any client apis like browsers,mobile   apps or even other microservices(Services)

Service API Design:
...................

1.WebService
   =>SOAP service =>Not in Use
   =>RestFull Webservice
       =>GraphQL API
2.RPC 
   =>TCP services
   =>Grpc Services
3.MoM -Event driven Microservices
   =>Kafka
   =>RabbitMQ

..................................................................................
..................................................................................
			RestFull WebService Implementation
..................................................................................
         	  Microservice-HTTP Based Microserivce
  	  RESTFull Web Service using JAX-RS  Spec (Jakarta RESTful Web Services)
		      using RESTEasy Framework
.....................................................................................

Jakarta RESTful Web Services is spec of JEE , implementation is RestEasy Framework..

In Quarkus RestEasy has been modified for building non blocking apps


			   QuarkusApp
			      |
	             Quarkus RestEasy Module
			      |
		         RestEasy Framwork
			     |
		   Jarkarta RestFull WebService


RESTEasy:

  RESTEasy is a JBoss / Red Hat project that provides various frameworks to help you build RESTful Web Services and RESTful Java applications. It is an implementation of the Jakarta RESTful Web Services, an Eclipse Foundation specification that provides a Java API for RESTful Web Services over the HTTP protocol.

Moreover, RESTEasy also implements the MicroProfile REST Client specification API

Quarkus team uses RESTEasy framework for building MicroService's REST API Design.

Traditional RESTEasy apps are deployed on "Jboss,Apach Tomcat" like web containers.
.....................................................................................
			  Types of Web services 

1.Reactive web service - Highly Recommended
2.Non Reactive web service - Not recommended


How to identify the reactive and non reactive?

via maven dependencies.

Reactive Version
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>

Non Reactive Version
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy</artifactId>
    </dependency>

Both dependency cant be added in one single project , either reactive or non reactive.

			 REST API development

Quarkus is based on JEE standards and MicroProfile standards

Quarkus rest api based on JAX-RS specification - Jakarta RESTful Web Services.

Quarkus implements RESTEasy Framework which is based on Jakarta WS.

RestEasy is based on Blocking and non blocking arch.

Quarkus by default adds Reactive(nonblocking) dependency.

    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>

..................

Getting started with rest api development:

1.create project
quarkus create app code-with-quarkus-rest
Looking for the newly published extensions in registry.quarkus.io
-----------

applying codestarts...
>> java
>> maven
>> quarkus
>> config-properties
>> dockerfiles
>> maven-wrapper
>> resteasy-reactive-codestart

-----------
[SUCCESS]  quarkus project has been successfully generated in:
--> E:\session\IBM\2023\Oct\Quarkus\code-with-quarkus-rest
-----------
Navigate into this directory and get started: quarkus dev

How to run quarkus app?

via quarkus cli command
via mvn or mvnw script.
.....................................................................................


Resources:
  Domain model which exposes api which  are accessed by clients using urls.

CustomerResource,ProductResource,PaymentResource

RESTEasy is annotation driven based on jakarta spec:
.....................................................

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "Hello from RESTEasy Reactive";
    }
}

Common Annotations

@Path - to Map url
@GET  -  HTTP Get
@POST  -HTTP POST
@PUT -HTTP PUT
@DELETE -HTTP DELETE


package com.ibm.rest.api;


import jakarta.ws.rs.*;

@Path("customers")
public class CustomerResource {

    //apis
    @GET
    public String findAll() {
        return "Customers";
    }

    @POST
    public String save() {
        return "Save";
    }

    @PUT
    public String update() {
        return "Update";
    }

    @DELETE
    public String remove() {
        return "Remove";
    }

}

GET /customers
POST /customers
DELETE/customers
PUT /customers
....................................................................................
			How to pass data to rest api
....................................................................................
Passing data to the REST API

Data can be passed to the end point

1.through url - path parameter,query parameters,matrix parameters
   data passed 
   Matrix Parameters: Passing more than one parameter.

2.Through body(payload)

Parameters: - Path Parameter:
..........................
 package com.ibm.rest.api.parameters.path;


import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;

@Path("users")
public class UserResource {

    //get user by id
    @GET
    @Path("/{Id}")
    public String findById(@PathParam("Id") Long id){
        return  "User " + id;
    }

}
QueryParameters:
 /books?pages=100

package com.ibm.rest.api.parameters.query;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.QueryParam;

//GET /books?pages=20
@Path("books")
public class BooksResource {

    @GET
    public String getPages(@QueryParam("pages") Integer pages){
        return "Total pages are " + pages;
    }
}
.....................................................................................
			Default values for Query Params
....................................................................................
What if i dont supply query parameters, it would be null, if you want default value..

.....................................................................................
			Default values for Query Params
....................................................................................
What if i dont supply query parameters, it would be null, if you want default value..

package com.ibm.rest.api.parameters.query;

import jakarta.ws.rs.DefaultValue;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.QueryParam;

//GET /books?pages=10
@Path("books")
public class Books {

    @GET
    public String getPages(@QueryParam("pages") @DefaultValue("1") Integer pages) {
        return "Requested Pages are " + pages;
    }
}
....................................................................................
			 Matrix Parameters

GET /employee/info;project=xx;client=xxx;location=xxx

package com.ibm.rest.api.parameters.matrix;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.MatrixParam;
import jakarta.ws.rs.Path;

//localhost:8080/employees/info;project=ecommerce;client=ebay
@Path("employees")
public class EmployeeResource {

    @GET
    @Path("/info")
    public String getEmployee(@MatrixParam("project") String project, @MatrixParam("client") String client) {
        return project + " " + client;
    }
}

